import argparse
from pathlib import Path
from string import Template

TEMPLATE_FILES = {
    "setup.py": Template("""\
from setuptools import setup, find_packages

setup(
    name="$name",
    description="Airbyte connector generated by scaffold script",
    author="Tobbe",
    author_email="tobbe@example.com",
    packages=find_packages(),
    install_requires=[
        "airbyte-cdk",
        "requests",
    ],
    extras_require={"dev": ["pytest"]},
    entry_points={
        "console_scripts": [
            "$name=$pkg.source:main",
        ],
    },
)
"""),
    "source/__init__.py": Template(""),
    "source/auth.py": Template("""\
import requests
from airbyte_cdk.sources.streams.http.auth import Authenticator


class PutSessionTokenAuthenticator(Authenticator):
    def __init__(self, base_url: str, consumer_token: str, employee_token: str, expiration_date: str):
        self.base_url = base_url
        self.consumer_token = consumer_token
        self.employee_token = employee_token
        self.expiration_date = expiration_date
        self._token = None

    def refresh_token(self):
        url = f"{self.base_url}/v2/token/session/:create"
        params = {
            "consumerToken": self.consumer_token,
            "employeeToken": self.employee_token,
            "expirationDate": self.expiration_date,
        }
        response = requests.put(url, params=params, headers={"accept": "*/*"})
        response.raise_for_status()
        self._token = response.json().get("token")

    def get_auth_header(self) -> dict:
        if not self._token:
            self.refresh_token()
        return {"Authorization": f"Basic {self._token}"}
"""),
    "source/streams.py": Template("""\
from airbyte_cdk.sources.streams.http import HttpStream
from .auth import PutSessionTokenAuthenticator


class MyApiBaseStream(HttpStream):
    url_base = "https://api-test.tripletex.tech/"

    def __init__(self, config, **kwargs):
        authenticator = PutSessionTokenAuthenticator(
            base_url=config["base_url"],
            consumer_token=config["consumer_token"],
            employee_token=config["employee_token"],
            expiration_date=config["expiration_date"],
        )
        super().__init__(authenticator=authenticator, **kwargs)

    def parse_response(self, response, **kwargs):
        yield from response.json()


class CustomersStream(MyApiBaseStream):
    def path(self, **kwargs) -> str:
        return "customers"
"""),
    "source/source.py": Template("""\
import sys
from airbyte_cdk.sources import AbstractSource
from .streams import CustomersStream


class SourceMyApi(AbstractSource):
    def check_connection(self, logger, config):
        try:
            stream = CustomersStream(config=config)
            next(stream.read_records(sync_mode=None))
            return True, None
        except Exception as e:
            return False, str(e)

    def streams(self, config):
        return [CustomersStream(config=config)]


def main():
    from airbyte_cdk.entrypoint import launch
    source = SourceMyApi()
    launch(source, sys.argv[1:])
"""),
    "unit_tests/test_basic.py": Template("""\
from $pkg.source import SourceMyApi


def test_streams():
    src = SourceMyApi()
    streams = src.streams({
        "base_url": "https://api-test.tripletex.tech",
        "consumer_token": "dummy",
        "employee_token": "dummy",
        "expiration_date": "2025-12-31"
    })
    assert len(streams) == 1
"""),
}


def scaffold(name: str):
    pkg = name.replace("-", "_")
    root = Path(name)
    (root / pkg).mkdir(parents=True, exist_ok=True)
    (root / "unit_tests").mkdir(parents=True, exist_ok=True)

    for rel_path, template in TEMPLATE_FILES.items():
        if rel_path.startswith("source/"):
            path = root / pkg / rel_path.split("/", 1)[1]
        else:
            path = root / rel_path
        path.parent.mkdir(parents=True, exist_ok=True)
        with open(path, "w") as f:
            f.write(template.substitute(name=name, pkg=pkg))

    print(f"âœ… Scaffolded connector at {root.absolute()}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Scaffold Airbyte Python CDK connector")
    parser.add_argument("--name", required=True, help="Connector package name, e.g. source-tripletex-put")
    args = parser.parse_args()
    scaffold(args.name)
